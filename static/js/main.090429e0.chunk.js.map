{"version":3,"sources":["Todo/TodoItem.js","Todo/TodosList.js","Todo/Header.js","Todo/InputTodo.js","Todo/TodoContainer.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","props","todo","completed","id","title","className","type","checked","onChange","handleChangeProps","onClick","deleteTodoProps","style","fontStyle","color","opacity","textDecoration","TodosList","this","todos","map","key","React","Component","Header","padding","lineHeight","fontSize","marginBottom","InputTodo","state","e","setState","target","name","value","handleSubmit","preventDefault","addTodoProps","onSubmit","placeholder","TodoContainer","uuid","v4","handleChange","delTodo","filter","addTodoItem","newTodo","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.090429e0.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction TodoItem(props) {\r\n  const completedStyle = {\r\n    fontStyle: \"italic\",\r\n    color: \"#d35e0f\",\r\n    opacity: 0.4,\r\n    textDecoration: \"line-through\"\r\n  };\r\n\r\n  const { completed, id, title } = props.todo;\r\n\r\n  return (\r\n    <div>\r\n      <li className=\"todo-item\">\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={completed}\r\n          onChange={() => props.handleChangeProps(id)}\r\n        />\r\n        <button onClick={() => props.deleteTodoProps(id)}>Delete</button>\r\n        <span style={completed ? completedStyle : null}>\r\n          {props.todo.title}\r\n        </span>\r\n      </li>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TodoItem;\r\n","import React from \"react\";\r\nimport TodoItem from \"./TodoItem.js\";\r\n\r\nclass TodosList extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.props.todos.map(todo => (\r\n          <TodoItem\r\n            key={todo.id}\r\n            todo={todo}\r\n            handleChangeProps={this.props.handleChangeProps}\r\n            deleteTodoProps={this.props.deleteTodoProps}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodosList;\r\n","import React from \"react\";\r\n\r\nconst Header = () => {\r\n  const headerStyle = {\r\n    padding: \"20px 0\",\r\n    lineHeight: \"2em\"\r\n  };\r\n  return (\r\n    <header style={headerStyle}>\r\n      <h1 style={{ fontSize: \"25px\", marginBottom: \"15px\" }}>\r\n        Simple Todo app\r\n      </h1>\r\n      <p style={{ fontSize: \"19px\" }}>Add to-do item(s)</p>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\n\r\nclass InputTodo extends Component {\r\n  state = {\r\n    title: \"\"\r\n  };\r\n\r\n  onChange = e => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value\r\n    });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.addTodoProps(this.state.title);\r\n    this.setState({\r\n      title: \"\"\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit} className=\"form-container\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"AddTodo...\"\r\n          value={this.state.title}\r\n          name=\"title\"\r\n          onChange={this.onChange}\r\n          className=\"input-text\"\r\n        />\r\n        <input type=\"submit\" value=\"submit\" className=\"input-submit\" />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default InputTodo;\r\n","import React from \"react\";\r\nimport \"../App.css\";\r\nimport TodosList from \"./TodosList.js\";\r\nimport Header from \"./Header.js\";\r\nimport InputTodo from \"./InputTodo\";\r\nimport uuid from \"uuid\";\r\n\r\nclass TodoContainer extends React.Component {\r\n  state = {\r\n    todos: [\r\n      {\r\n        id: uuid.v4(),\r\n        title: \"Setup development environment\",\r\n        completed: true\r\n      },\r\n      {\r\n        id: uuid.v4(),\r\n        title: \"Develop website and add content\",\r\n        completed: false\r\n      },\r\n      {\r\n        id: uuid.v4(),\r\n        title: \"Deploy to live server\",\r\n        completed: false\r\n      }\r\n    ]\r\n  };\r\n\r\n  handleChange = id => {\r\n    this.setState({\r\n      todos: this.state.todos.map(todo => {\r\n        if (todo.id === id) {\r\n          todo.completed = !todo.completed;\r\n        }\r\n        return todo;\r\n      })\r\n    });\r\n  };\r\n\r\n  delTodo = id => {\r\n    this.setState({\r\n      todos: [\r\n        ...this.state.todos.filter(todo => {\r\n          return todo.id !== id;\r\n        })\r\n      ]\r\n    });\r\n  };\r\n\r\n  addTodoItem = title => {\r\n    const newTodo = {\r\n      id: uuid.v4(),\r\n      title: title,\r\n      completed: false\r\n    };\r\n    this.setState({\r\n      todos: [...this.state.todos, newTodo]\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <Header />\r\n        <InputTodo addTodoProps={this.addTodoItem} />\r\n        <TodosList\r\n          todos={this.state.todos}\r\n          handleChangeProps={this.handleChange}\r\n          deleteTodoProps={this.delTodo}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoContainer;\r\n","import React from \"react\";\nimport TodoContainer from \"./Todo/TodoContainer.js\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}